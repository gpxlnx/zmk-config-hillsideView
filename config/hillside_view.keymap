#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Left bottom row pinky 2nd column

#ifndef LB5

#define LB5 24

#endif

// Right bottom row pinky 2nd column
#ifndef RB5

#define RB5 35

#endif

#define DEF 0
#define WIN 1
#define SWP 2
#define SYM 3
#define NUM 4
#define ADJ 5
#define QUICK_TAP_MS 175

&sk {
    release-after-ms = <600>;
    quick-release;
};

/ {
    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        // symbols

        cb_excl {
            bindings = <&kp EXCL>;
            key-positions = <1 13>;
            timeout-ms = <30>;
        };

        cb_at {
            bindings = <&kp AT>;
            key-positions = <2 14>;
            timeout-ms = <30>;
        };

        cb_hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
            timeout-ms = <30>;
        };

        cb_dllr {
            bindings = <&kp DLLR>;
            key-positions = <4 16>;
            timeout-ms = <30>;
        };

        cb_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <5 17>;
            timeout-ms = <30>;
        };

        cb_caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
            timeout-ms = <30>;
        };

        cb_amps {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <7 19>;
            timeout-ms = <30>;
        };

        cb_mult {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <8 20>;
            timeout-ms = <30>;
        };

        cb_lparen {
            bindings = <&kp ASTERISK>;
            key-positions = <9 21>;
            timeout-ms = <30>;
        };

        cb_rparen {
            bindings = <&kp AMPERSAND>;
            key-positions = <10 22>;
            timeout-ms = <30>;
        };

        play-pause {
            bindings = <&kp C_PLAY_PAUSE>;
            key-positions = <19 20>;
        };

        print-clipboard {
            bindings = <&kp LG(LS(NUMBER_4))>;
            key-positions = <15 16>;
        };
    };

    behaviors {
        holdtolayer: holdtolayer {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDTOLAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
        };

        holdortap: holdortap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLDORTAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
        };

        shiftorcaps: shiftorcaps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFTORCAPS";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;

            tapping-term-ms = <500>;
        };

        layer1or4: layer1or4 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER1OR4";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&mo 4>;

            tapping-term-ms = <500>;
        };

        layer3or5: layer3or5 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER3OR5";
            #binding-cells = <0>;
            bindings = <&mo 3>, <&mo 5>;

            tapping-term-ms = <500>;
        };
    };

    macros {
        exitterm: exitterm {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp X &kp I &kp T &kp ENTER>;
            label = "EXITTERM";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "DEFAULT";
            bindings = <
&kp TAB           &kp Q     &kp W       &kp E       &kp R  &kp T      &kp Y  &kp U  &kp I       &kp O       &kp P                              &kp BSPC
&kp LEFT_CONTROL  &kp A     &kp S       &kp D       &kp F  &kp G      &kp H  &kp J  &kp K       &kp L       &kp SEMI                           &kp SQT
&shiftorcaps      &kp Z     &kp X       &kp C       &kp V  &kp B      &kp N  &kp M  &kp COMMA   &kp DOT     &holdortap NON_US_BACKSLASH SLASH  &kp ESC
                                        &kp C_MUTE                                  &kp RG(N0)
                  &kp LGUI  &layer3or5  &kp SPACE   &mo 5                    &mo 4  &kp RET     &layer1or4  &mo 2
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOLUME_DOWN C_VOL_UP>,
                <&inc_dec_kp LG(PLUS) RG(MINUS)>;
        };

        numLayer {
            bindings = <
&kp RG(RC(SPACE))  &kp LBKT    &kp N7        &kp N8     &kp N9  &kp RBKT       &kp K_MUTE  &kp LG(MINUS)  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp LG(EQUAL)  &trans
&trans             &kp PLUS    &kp N4        &kp N5     &kp N6  &kp EQUAL      &kp LG(J)   &kp LSHFT      &kp LCTRL          &kp LALT         &kp LGUI       &trans
&trans             &kp ASTRK   &kp NUMBER_1  &kp N2     &kp N3  &kp BSLH       &kp LC(C)   &kp LC(L)      &kp LG(BSLH)       &exitterm        &trans         &trans
                                             &trans                                                       &trans
                   &kp PERIOD  &kp N0        &kp MINUS  &trans                             &trans         &trans             &trans           &trans
            >;

            sensor-bindings = <&inc_dec_kp C_AC_SCROLL_DOWN C_AC_SCROLL_UP>;
        };

        symLayer {
            bindings = <
&trans  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)    &kp LS(LPAR)   &kp LS(RBRC)      &kp LBKT    &kp GRAVE   &kp BSLH    &trans      &kp RBKT    &trans
&trans  &kp LS(COLON)  &kp LS(DLLR)  &kp LS(PRCNT)   &kp CARET      &kp EQUAL         &trans      &kp LSHFT   &kp LCTRL   &kp LALT    &kp LGUI    &trans
&trans  &kp TILDE      &kp LS(EXCL)  &kp LS(AT)      &kp LS(POUND)  &kp LS(PIPE)      &kp LG(N5)  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)  &kp LG(N4)  &trans
                                     &trans                                                                   &trans
        &kp LS(RPAR)   &kp MINUS     &kp UNDERSCORE  &trans                                       &trans      &trans      &trans      &trans
            >;
        };

        navlayer {
            bindings = <
&kp LS(TAB)  &kp LS(LG(GRAVE))  &kp LS(LC(TAB))  &kp LC(TAB)         &kp LG(GRAVE)  &kp LG(W)          &kp LG(A)  &kp LG(C)  &kp LG(V)  &kp LG(Z)  &kp LS(LG(Z))  &trans
&trans       &kp LGUI           &kp LALT         &kp LSHFT           &kp LCTRL      &kp LG(T)          &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT  &trans         &trans
&trans       &trans             &trans           &kp LG(LA(ESCAPE))  &kp LG(SPACE)  &kp LG(SLASH)      &kp HOME   &kp PG_DN  &kp PG_UP  &kp END    &trans         &trans
                                                 &trans                                                                      &kp LG(R)
             &trans             &trans           &trans              &trans                                       &trans     &trans     &kp BSPC   &kp DEL
            >;

            sensor-bindings =
                <&inc_dec_kp LC(LS(TAB)) LC(TAB)>,
                <&inc_dec_kp LS(LC(TAB)) LC(TAB)>;
        };

        funlayer {
            bindings = <
&trans       &kp F12  &kp F7         &kp F8   &kp F9  &kp LG(LS(NUMBER_4))      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &trans
&bt BT_CLR   &kp F11  &kp F4         &kp F5   &kp F6  &kp LG(LS(NUMBER_3))      &trans        &kp LSHFT     &kp LCTRL     &kp LALT      &kp LGUI      &trans
&bootloader  &kp F10  &kp F1         &kp F2   &kp F3  &kp LG(LS(NUMBER_2))      &bootloader   &trans        &trans        &trans        &trans        &trans
                                     &trans                                                                 &trans
             &trans   &kp LG(LC(Q))  &kp TAB  &trans                                          &trans        &trans        &trans        &trans
            >;
        };

        codinglayer {
            bindings = <
&trans  &trans  &trans     &trans     &trans     &trans             &trans            &trans            &trans            &trans            &trans      &trans
&trans  &trans  &kp LG(S)  &kp LG(A)  &kp LG(C)  &kp LG(V)          &kp LG(X)         &kp LG(Z)         &kp LG(LS(Z))     &trans            &trans      &trans
&trans  &trans  &trans     &trans     &trans     &kp LG(SLASH)      &kp LG(NUMBER_1)  &kp LG(NUMBER_2)  &kp LG(NUMBER_3)  &kp LG(NUMBER_4)  &kp LG(N5)  &trans
                           &trans                                                                       &trans
        &trans  &trans     &trans     &trans                                          &trans            &trans            &trans            &trans
            >;
        };
    };
};
